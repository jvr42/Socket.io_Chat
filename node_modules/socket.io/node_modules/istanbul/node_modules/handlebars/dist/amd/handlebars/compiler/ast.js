define(
  ["../exception","exports"],
  function(__dependency1__, __exports__) {
    "use strict";
    var Exception = __dependency1__["default"];

    var AST = {
      ProgramNode: function(statements, inverseStrip, inverse) {
        this.type = "program";
        this.statements = statements;
        this.strip = {};

        if(inverse) {
          this.inverse = new AST.ProgramNode(inverse, inverseStrip);
          this.strip.right = inverseStrip.left;
        } else if (inverseStrip) {
          this.strip.left = inverseStrip.right;
        }
      },

      MustacheNode: function(rawParams, hash, open, strip) {
        this.type = "mustache";
        this.hash = hash;
        this.strip = strip;

        // Open may be a string parsed from the parser or a passed boolean flag
        if (open != null && open.charAt) {
          // Must use charAt to support IE pre-10
          var escapeFlag = open.charAt(3) || open.charAt(2);
          this.escaped = escapeFlag !== '{' && escapeFlag !== '&';
        } else {
          this.escaped = !!open;
        }

        var id = this.id = rawParams[0];
        var params = this.params = rawParams.slice(1);

        // a mustache is an eligible helper if:
        // * its id is simple (a single part, not `this` or `..`)
        var eligibleHelper = this.eligibleHelper = id.isSimple;

        // a mustache is definitely a helper if:
        // * it is an eligible helper, and
        // * it has at least one parameter or hash segment
        this.isHelper = eligibleHelper && (params.length || hash);

        // if a mustache is an eligible helper but not a definite
        // helper, it is ambiguous, and will be resolved in a later
        // pass or at runtime.
      },

      PartialNode: function(partialName, context, strip) {
        this.type         = "partial";
        this.partialName  = partialName;
        this.context      = context;
        this.strip = strip;
      },

      BlockNode: function(mustache, program, inverse, close) {
        if(mustache.id.original !== close.path.original) {
          throw new Exception(mustache.id.original + " doesn't match " + close.path.original);
        }

        this.type = "block";
        this.mustache = mustache;
        this.program  = program;
        this.inverse  = inverse;

        this.strip = {
          left: mustache.strip.left,
          right: close.strip.right
        };

        (program || inverse).strip.left = mustache.strip.right;
        (inverse || program).strip.right = close.strip.left;

        if (inverse && !program) {
          this.isInverse = true;
        }
      },

      ContentNode: function(string) {
        this.type = "content";
        this.string = string;
      },

      HashNode: function(pairs) {
        this.type = "hash";
        this.pairs = pairs;
      },

      IdNode: function(parts) {
        this.type = "ID";

        var original = "",
            dig = [],
            depth = 0;

        for(var i=0,l=parts.length; i<l; i++) {
          var part = parts[i].part;
          original += (parts[i].separator || '') + part;

          if (part === ".." || part === "." || part === "this") {
            if (dig.length > 0) { throw new Exception("Invalid path: " + original); }
            else if (part === "..") { depth++; }
            else { this.isScoped = true; }
          }
          else { dig.push(part); }
        }

        this.original = original;
        this.parts    = dig;
        this.string   = dig.join('.');
        this.depth    = depth;

        // an ID is simple if it only has one part, and that part is not
        // `..` or `this`.
        this.isSimple = parts.length === 1 && !this.isScoped && depth === 0;

        this.stringModeValue = this.string;
      },

      PartialNameNode: function(name) {
        this.type = "PARTIAL_NAME";
        this.name = name.original;
      },

      DataNode: function(id) {
        this.type = "DATA";
        this.id = id;
      },

      StringNode: function(string) {
        this.type = "STRING";
        this.original =
          this.string =
          this.stringModeValue = string;
      },

      IntegerNode: function(integer) {
        this.type = "INTEGER";
        this.original =
          this.integer = integer;
        this.stringModeValue = Number(integer);
      },

      BooleanNode: function(bool) {
        this.type = "BOOLEAN";
        this.bool = bool;
        this.stringModeValue = bool === "true";
      },

      CommentNode: function(comment) {
        this.type = "comment";
        this.comment = comment;
      }
    };

    // Must be exported as an object rather than the root of the module as the jison lexer
    // most modify the object to operate properly.
    __exports__["default"] = AST;
  });